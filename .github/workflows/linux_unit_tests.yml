name: Unit Tests - Linux

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  unit_tests:
    name: ${{ matrix.python_version }} Unit Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python_version: ["3.8", "3.9", "3.10"]
        command: ["test-datasets", "test-models", "test-mocks", "test-graphs", "test-utils"]
    steps:
      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 2
      - name: Installing Dependencies
        run: |
          pip install virtualenv
          virtualenv test_python -q
          source test_python/bin/activate
          make installdeps
          make installdeps-test
          pip freeze
      - name: Erase Coverage
        run: |
          source test_python/bin/activate
          coverage erase
      if: ${{ matrix.command == 'test-datasets' }}
        name: Running Dataset Tests
        run: |
          source test_python/bin/activate
          make test-datasets
      if: ${{ matrix.command == 'test-models' }}
        name: Running Models Tests
        run: |
          source test_python/bin/activate
          make test-models
      if: ${{ matrix.command == 'test-mocks' }}
        name: Running Mocks Tests
        run: |
          source test_python/bin/activate
          make test-mocks
      if: ${{ matrix.command == 'test-graphs' }}
        name: Running Graphs Tests
        run: |
          source test_python/bin/activate
          make test-graphs
      if: ${{ matrix.command == 'test-utils' }}
        name: Running Utils Tests
        run: |
          source test_python/bin/activate
          make test-utils
      - name: Upload pytest duration artifact
        uses: actions/upload-artifact@v2
        with:
          name: pytest-duration-report
          path: test-reports/${{matrix.command}}-junit.xml
      - name: install coverage
        run: pip install coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

